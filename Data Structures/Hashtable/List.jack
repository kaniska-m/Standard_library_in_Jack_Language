class List
{
    field Node head, tail;
    field int size;

    constructor List new ()
    {
        let size = 0;
        return this;
    }

    method void push_back (int element, int key)
    {
        var Node newNode, temp;
        let newNode = Node.new(element, key);

        if (size = 0)
        {
            let head = newNode;
            do head.set_next(newNode);
            do head.set_prev(newNode);

            let tail = newNode;
            do tail.set_next(newNode);
            do tail.set_prev(newNode);
        }
        else
        {
            do head.set_prev(newNode);
            let temp = head;
            let head = newNode;
            do head.set_next(temp);
            do head.set_prev(tail);
            do tail.set_next(head);
        }

        let size = size + 1;

        return;
    }

    method void push_front (int element, int key)
    {
        var Node newNode, temp;
        let newNode = Node.new(element, key);

        if (size = 0)
        {
            let head = newNode;
            do head.set_next(newNode);
            do head.set_prev(newNode);

            let tail = newNode;
            do tail.set_next(newNode);
            do tail.set_prev(newNode);
        }
        else
        {
            do tail.set_next(newNode);
            let temp = tail;
            let tail = newNode;
            do tail.set_next(head);
            do tail.set_prev(temp);     
        }

        let size = size + 1;

        return;
    }

    method Node back ()
    {
        return head;
    }

    method Node front ()
    {
        return tail;
    }

    method int get_tail ()
    {
        return tail.get_element();
    }
    
    method int get_head ()
    {
        return head.get_element();
    }

    method int get_size ()
    {
        return size;
    }

    method void print ()
    {
        var Node iter;

        if (size = 0)
        {
            return;
        }

        let iter = head;

        while (~(iter = tail))
        {
            do Output.printInt(iter.get_element());
            do Output.printString(" ");
            let iter = iter.get_next();
        }

        do Output.printInt(iter.get_element());

        return;
    }

    method void dispose ()
    {
        var Node iter, last;

        if (size = 0)
        {
            do Memory.deAlloc(this);

            return;
        }

        let iter = head.get_next();
        let last = head;

        while (~(iter = tail))
        {
            do last.dispose();
            let last = iter;
            let iter = iter.get_next();
        }

        do last.dispose();
        do iter.dispose();

        do Memory.deAlloc(this);

        return;
    }
}